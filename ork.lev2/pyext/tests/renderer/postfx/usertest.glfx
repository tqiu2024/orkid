///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {}
///////////////////////////////////////////////////////////////
// Uniforms
///////////////////////////////////////////////////////////////
uniform_set ub_vtx {
  mat4 mvp;
  vec4 modcolor;
  float time;
}
uniform_set ub_frg {
  float time;
  int image_width;
  int image_height;
  float EffectAmount;

  sampler2D MrtMap0;
  sampler2D MrtMap1;
  sampler2D MrtMap2;
  sampler2D MrtMap3;
  sampler2D AuxMap0;
  sampler2D AuxMap1;
  sampler2D NoiseMap;
}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
vertex_interface iface_vtx : ub_vtx {
  inputs {
    vec4 position : POSITION;
    vec4 vtxcolor : COLOR0;
    vec2 uv0 : TEXCOORD0;
    vec2 uv1 : TEXCOORD1;
  }
  outputs {
    vec4 frg_clr;
    vec2 frg_uv;
  }
}
///////////////////////////////////////////////////////////////
fragment_interface iface_frg : ub_frg {
  inputs { vec2 frg_uv; }
  //
  outputs { vec4 out_clr; }
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default : default {
  BlendMode = OFF;
  DepthTest = OFF;
  CullTest  = OFF;
}
///////////////////////////////////////////////////////////////
// Shaders
///////////////////////////////////////////////////////////////
vertex_shader vs_usertest : iface_vtx {
  gl_Position = mvp * position;
  frg_clr     = vtxcolor;
  frg_uv      = uv0;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_usertest1 : iface_frg {
  // uv displace radially based on time
  vec2 disp_uv = frg_uv-vec2(0.5,0.5);
  float radius = length(disp_uv);
  float angle = atan(disp_uv.y, disp_uv.x);
  float displacement_amount = 0.01;
  float new_radius = radius + sin(time*10.0+angle*10.0)*displacement_amount;
  vec2 new_uv = vec2(cos(angle)*new_radius, sin(angle)*new_radius)+vec2(0.5,0.5);

  vec4 inprgb = texture(MrtMap0, new_uv);
  out_clr   = vec4(inprgb.xyz, 1.0);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_usertest2 : iface_frg {
  vec4 inprgb = texture(MrtMap0, frg_uv);
  out_clr   = vec4(mod(inprgb.xyz*10,1), 1.0);
}
///////////////////////////////////////////////////////////////
// techniques
///////////////////////////////////////////////////////////////
technique postfx_usertest1 {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_usertest;
    fragment_shader = ps_usertest1;
    state_block     = sb_default;
  }
}
technique postfx_usertest2 {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_usertest;
    fragment_shader = ps_usertest2;
    state_block     = sb_default;
  }
}
